/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SpotBase {
  export type PlaceStruct = {
    creator: AddressLike;
    name: string;
    description: string;
    location: string;
    createdAt: BigNumberish;
    reviewCount: BigNumberish;
  };

  export type PlaceStructOutput = [
    creator: string,
    name: string,
    description: string,
    location: string,
    createdAt: bigint,
    reviewCount: bigint
  ] & {
    creator: string;
    name: string;
    description: string;
    location: string;
    createdAt: bigint;
    reviewCount: bigint;
  };

  export type ReviewStruct = {
    reviewer: AddressLike;
    rating: BigNumberish;
    text: string;
    createdAt: BigNumberish;
  };

  export type ReviewStructOutput = [
    reviewer: string,
    rating: bigint,
    text: string,
    createdAt: bigint
  ] & { reviewer: string; rating: bigint; text: string; createdAt: bigint };
}

export interface SpotBaseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addReview"
      | "createPlace"
      | "getPlace"
      | "getReviews"
      | "nextPlaceId"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "PlaceCreated" | "ReviewAdded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addReview",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createPlace",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlace",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReviews",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextPlaceId",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addReview", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPlace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlace", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getReviews", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextPlaceId",
    data: BytesLike
  ): Result;
}

export namespace PlaceCreatedEvent {
  export type InputTuple = [
    placeId: BigNumberish,
    creator: AddressLike,
    name: string
  ];
  export type OutputTuple = [placeId: bigint, creator: string, name: string];
  export interface OutputObject {
    placeId: bigint;
    creator: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReviewAddedEvent {
  export type InputTuple = [
    placeId: BigNumberish,
    reviewer: AddressLike,
    rating: BigNumberish
  ];
  export type OutputTuple = [placeId: bigint, reviewer: string, rating: bigint];
  export interface OutputObject {
    placeId: bigint;
    reviewer: string;
    rating: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SpotBase extends BaseContract {
  connect(runner?: ContractRunner | null): SpotBase;
  waitForDeployment(): Promise<this>;

  interface: SpotBaseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addReview: TypedContractMethod<
    [placeId: BigNumberish, rating: BigNumberish, text: string],
    [void],
    "nonpayable"
  >;

  createPlace: TypedContractMethod<
    [name: string, description: string, location: string],
    [bigint],
    "nonpayable"
  >;

  getPlace: TypedContractMethod<
    [placeId: BigNumberish],
    [SpotBase.PlaceStructOutput],
    "view"
  >;

  getReviews: TypedContractMethod<
    [placeId: BigNumberish],
    [SpotBase.ReviewStructOutput[]],
    "view"
  >;

  nextPlaceId: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addReview"
  ): TypedContractMethod<
    [placeId: BigNumberish, rating: BigNumberish, text: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createPlace"
  ): TypedContractMethod<
    [name: string, description: string, location: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPlace"
  ): TypedContractMethod<
    [placeId: BigNumberish],
    [SpotBase.PlaceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReviews"
  ): TypedContractMethod<
    [placeId: BigNumberish],
    [SpotBase.ReviewStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextPlaceId"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "PlaceCreated"
  ): TypedContractEvent<
    PlaceCreatedEvent.InputTuple,
    PlaceCreatedEvent.OutputTuple,
    PlaceCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ReviewAdded"
  ): TypedContractEvent<
    ReviewAddedEvent.InputTuple,
    ReviewAddedEvent.OutputTuple,
    ReviewAddedEvent.OutputObject
  >;

  filters: {
    "PlaceCreated(uint256,address,string)": TypedContractEvent<
      PlaceCreatedEvent.InputTuple,
      PlaceCreatedEvent.OutputTuple,
      PlaceCreatedEvent.OutputObject
    >;
    PlaceCreated: TypedContractEvent<
      PlaceCreatedEvent.InputTuple,
      PlaceCreatedEvent.OutputTuple,
      PlaceCreatedEvent.OutputObject
    >;

    "ReviewAdded(uint256,address,uint8)": TypedContractEvent<
      ReviewAddedEvent.InputTuple,
      ReviewAddedEvent.OutputTuple,
      ReviewAddedEvent.OutputObject
    >;
    ReviewAdded: TypedContractEvent<
      ReviewAddedEvent.InputTuple,
      ReviewAddedEvent.OutputTuple,
      ReviewAddedEvent.OutputObject
    >;
  };
}
